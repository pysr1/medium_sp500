html_table()
#create a list of tickers
sp500tickers <- tickers[[1]]
sp500tickers = sp500tickers %>% mutate(Symbol = case_when(Symbol == "BRK.B" ~ "BRK-B",
Symbol == "BF.B" ~ "BF-B",
TRUE ~ as.character(Symbol)))
symbols = sp500tickers$Symbol
# define a function that retunrs OHLC data with the ticker name
get_symbols = function(ticker = "AAPL"){
df = tq_get(ticker, from = date)  %>%  mutate(symbol = rep(ticker, length(date)))
return(df)
}
#create the dataframe of SP500 data by interating over our list of symbols and call our get symbols function each time
#the map function accomplishes this
tickers_df = map(symbols, get_symbols) %>% bind_rows()
tickers_df = tickers_df %>%
# left join with wikipedia data
left_join(sp500tickers, by = c('symbol' = 'Symbol')) %>%
# make names R compatible
clean_names() %>%
# keep only the columns we need
select(date:security, gics_sector, gics_sub_industry)
#tickers_df = tq_get(symbols)
Rows = dim(tickers_df)[1]
Columns = dim(tickers_df)[2]
dimensions = data.frame(Rows, Columns)
print(dimensions)
tickers_df %>% head()
ticker = "GOOGL"
tickers_df %>%
filter(symbol == !!ticker) %>%
ggplot(aes(date, adjusted))+
geom_line()
daily_sector = tickers_df %>% group_by(security, gics_sector, symbol) %>%
tq_transmute(select     = adjusted,
mutate_fun = periodReturn,
period     = "daily")
avg_return =daily_sector %>%
group_by(security, gics_sector, symbol) %>%
summarise(avg_return = round(mean(daily.returns), 4),Volatility = sd(daily.returns), cv = Volatility/avg_return) %>%         arrange(desc(avg_return), desc(Volatility))
avg_return %>% head()
avg_return %>% head(20) %>% ggplot(aes(reorder(security, -avg_return), avg_return, fill = avg_return))+
geom_col()+
coord_flip()+
labs(title = "Assets With Highest Returns In SP500 Over Past 3 Month", x = "Security", y = "Average Return")+
theme_classic()+
theme(legend.position="none")
tickers_df %>%
filter(security == 'Dow Inc.') %>%
ggplot(aes(date, adjusted))+
geom_line()
hardware = c('Intel Corp.', 'Advanced Micro Devices Inc', 'Nvidia Corporation')
tickers_df %>%
filter(security %in% hardware) %>%
select(date, adjusted, security) %>%
ggplot(aes(date, adjusted))+
geom_point()+
geom_smooth()+
theme_classic()+
facet_wrap(~security, scales = 'free_y')
daily_sector %>%
filter(security %in% hardware) %>%
ggplot(aes(daily.returns))+
geom_density(fill = 'grey')+
facet_wrap(~security)+
theme_classic()
avg_return %>% tail(20) %>% ggplot(aes(reorder(security, avg_return), avg_return, fill = avg_return))+
geom_col()+
coord_flip()+
labs(title = "Assets With Lowest Returns In SP500 Over Past 3 Month", x = "Security", y = "Average Return")+
theme_classic()+
theme(legend.position="none")
daily_sector %>% group_by(gics_sector) %>% summarise(Mean_Return = mean(daily.returns)) %>%
ggplot(aes(reorder(gics_sector, -Mean_Return), Mean_Return, fill = Mean_Return))+
geom_col()+
coord_flip()+
theme_classic()+
theme(legend.position="none")+
labs(title = "Average Return by Sector Over Last Month", y = "Mean Return", x = "GICS Sector")
plot = avg_return %>% ggplot(aes(avg_return, Volatility))+
geom_text(aes(label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
plot
avg_return = avg_return %>%
mutate(Indicator = case_when(symbol %in% c('FOX', 'FOXA') ~ "Fox Corporation",
TRUE ~ "The Rest of the SP500"))
plot = avg_return %>% ggplot(aes(avg_return, Volatility, color = Indicator))+
geom_text(aes(label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot, tooltip = c('avg_return', 'Volatility', 'Security'))
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
textfont = list(color = '#000000', size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return'
),
yaxis = list(title = 'Volatility'
))
p
symbols = c('FOX', 'FOXA')
fox = tq_get(symbols, from = '2017/01/01')
fox %>%
ggplot(aes(date, adjusted))+
geom_line()+
geom_smooth(method = 'lm', alpha = 0.3)+
facet_wrap(~symbol)+
theme_classic()
plot + facet_wrap(~gics_sector, ncol = 3)
tq_index("SP500")
tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.8, color = 'light blue')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.8, color = 'dark blue')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.8, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.3, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.3, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.3, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
ggplotly(zoomed)
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.3, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
ggplotly(zoomed)
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
mutate(Legend = case_when(date == "2019-03-13" ~ "Protests"
date == "2019-03-19" ~ "Fox Corp Begin Independent Trading")) %>%
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
mutate(Legend = case_when(date == "2019-03-13" ~ "Protests",
date == "2019-03-19" ~ "Fox Corp Begin Independent Trading",
TRUE ~ "No Event")) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.3, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
ggplotly(zoomed)
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
mutate(Legend = case_when(date == "2019-03-13" ~ "Protests",
date == "2019-03-19" ~ "Fox Corp Begin Independent Trading",
TRUE ~ "No Event")) %>%
ggplot(aes(date, adjusted, color = Legend))+
geom_point(alpha = 0.3, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
ggplotly(zoomed)
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
mutate(Legend = case_when(date == "2019-03-13" ~ "Protests",
date == "2019-03-19" ~ "Fox Corp Begin Independent Trading",
TRUE ~ "No Event")) %>%
ggplot(aes(date, adjusted))+
geom_point(aes(color = Legend), alpha = 0.3)+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
ggplotly(zoomed)
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
mutate(Legend = case_when(date == "2019-03-13" ~ "Protests",
date == "2019-03-19" ~ "Fox Corp Begin Independent Trading",
TRUE ~ "No Event")) %>%
ggplot(aes(date, adjusted))+
geom_point(aes(color = Legend))+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
ggplotly(zoomed)
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.3, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
zoomed = tickers_df %>%
filter(symbol %in% c('FOX', 'FOXA')) %>%
ggplot(aes(date, adjusted))+
geom_point(alpha = 0.3, color = 'black')+
geom_line()+
facet_wrap(~symbol)+
theme_classic()
ggplotly(zoomed)
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
textfont = list(color = '#000000', size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return'
),
yaxis = list(title = 'Volatility'
))
p
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
textfont = list(color = '#000000', size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator
textfont = list(color = '#000000', size = 8)) %>%
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator,
textfont = list(color = '#000000', size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator,
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'set1',
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'Set1',
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'Set1', hoverinfo = ~security,
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'Set1', hoverinfo = 'security',
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
avg_return = avg_return %>%
mutate(Indicator = case_when(symbol %in% c('FOX', 'FOXA') ~ "Fox Corporation",
TRUE ~ "Rest of the SP500"))
plot = avg_return %>% ggplot(aes(avg_return, Volatility, color = Indicator))+
geom_text(aes(label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot, tooltip = c('avg_return', 'Volatility', 'Security'))
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'Set1',
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
avg_return = avg_return %>%
mutate(Indicator = case_when(symbol %in% c('FOX', 'FOXA') ~ "Fox Corporation",
TRUE ~ "Rest of SP500"))
plot = avg_return %>% ggplot(aes(avg_return, Volatility, color = Indicator))+
geom_text(aes(label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot, tooltip = c('avg_return', 'Volatility', 'Security'))
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'Set1',
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
plot = avg_return %>% ggplot(aes(avg_return, Volatility, color = Indicator, text = security))+
geom_text(aes(label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot, tooltip = c('avg_return', 'Volatility', 'Security'))
plot = avg_return %>% ggplot(aes(avg_return, Volatility, color = Indicator, text = security))+
geom_text(aes(label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot)
plot = avg_return %>% ggplot(aes(text = avg_return, text = Volatility, color = Indicator, text = security))+
geom_text(aes(x = avg_return, y = Volatility, label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot)
plot = avg_return %>% ggplot(aes(text = paste("Average Return", avg_return), text = Volatility, color = Indicator, text = security))+
geom_text(aes(x = avg_return, y = Volatility, label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot)
plot = avg_return %>% ggplot(aes(text = paste("Average Return", avg_return), text = ("Volatility", Volatility), color = Indicator, text = security))+
plot = avg_return %>% ggplot(aes(text = paste("Average Return", avg_return), text = paste("Volatility", Volatility), color = Indicator, text = security))+
geom_text(aes(x = avg_return, y = Volatility, label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot)
plot = avg_return %>% ggplot(aes(text = paste("Average Return", avg_return), text = paste("Volatility", Volatility), color = Indicator, text = security))+
geom_text(aes(x = avg_return, y = Volatility, label = symbol), size = 3)+
labs(title = "Average Return vs Volatility Over Last 3 Months In SP500", x = "Average Return", subtitle = "Data Source: Yahoo Finance")+
theme_minimal()
library(plotly)
ggplotly(plot, tooltip = c(text))
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'Set1',
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
Sys.setenv("plotly_username"="crocker4569883")
Sys.setenv("plotly_api_key"="tXgrsVEZTCBegbEhWJ9g")
api_create(p, filename = "returnVolatilityplot")
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'Set1',
textfont = list(size = 8)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500', textfont = list(12),
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
Sys.setenv("plotly_username"="crocker4569883")
Sys.setenv("plotly_api_key"="tXgrsVEZTCBegbEhWJ9g")
api_create(p, filename = "returnVolatilityplot")
p <- plot_ly(avg_return, x = ~avg_return, y = ~Volatility, type = 'scatter',
mode = 'text', text = ~symbol, textposition = 'middle right',
color = ~Indicator, colors = 'Set1',
textfont = list(size = 10)) %>%
layout(title = 'Average Return vs Volatility Over Last 3 Months In SP500',
xaxis = list(title = 'Averaage Return', zeroline = FALSE
),
yaxis = list(title = 'Volatility'
))
p
Sys.setenv("plotly_username"="crocker4569883")
Sys.setenv("plotly_api_key"="tXgrsVEZTCBegbEhWJ9g")
api_create(p, filename = "returnVolatilityplot")
# for scraping
library(rvest)
# blanket import for core tidyverse packages
library(tidyverse)
# tidy financial analysis
library(tidyquant)
# tidy data cleaning functions
library(janitor)
# save current system date to a variable
today <- Sys.Date()
# subtract 3 months from the current date
date = today %m+% months(-3)
print(date)
# pass SP500 ticker ^GSPC to tq_get function
one_ticker = tq_get("^GSPC", from = date)
one_ticker %>%
head()
# get the URL for the wikipedia page with all SP500 symbols
url <- "https://en.wikipedia.org/wiki/List_of_S%26P_500_companies"
# use that URL to scrape the SP500 table using rvest
tickers <- url %>%
# read the HTML from the webpage
read_html() %>%
# one way to get table
#html_nodes(xpath='//*[@id="mw-content-text"]/div/table[1]') %>%
# easier way to get table
html_nodes(xpath = '//*[@id="constituents"]') %>%
html_table()
#create a list of tickers
sp500tickers <- tickers[[1]]
sp500tickers = sp500tickers %>% mutate(Symbol = case_when(Symbol == "BRK.B" ~ "BRK-B",
Symbol == "BF.B" ~ "BF-B",
TRUE ~ as.character(Symbol)))
symbols = sp500tickers$Symbol
# define a function that retunrs OHLC data with the ticker name
get_symbols = function(ticker = "AAPL"){
df = tq_get(ticker, from = date)  %>%  mutate(symbol = rep(ticker, length(date)))
return(df)
}
#create the dataframe of SP500 data by interating over our list of symbols and call our get symbols function each time
#the map function accomplishes this
tickers_df = map(symbols, get_symbols) %>% bind_rows()
tickers_df = tickers_df %>%
# left join with wikipedia data
left_join(sp500tickers, by = c('symbol' = 'Symbol')) %>%
# make names R compatible
clean_names() %>%
# keep only the columns we need
select(date:security, gics_sector, gics_sub_industry)
#tickers_df = tq_get(symbols)
Rows = dim(tickers_df)[1]
Columns = dim(tickers_df)[2]
dimensions = data.frame(Rows, Columns)
print(dimensions)
library(tidyquant)
library(highcharter)
tq_get('NKE') %>% hchart
library(tidyquant)
library(highcharter)
tq_get('NKE') %>% hchart()
library(tidyquant)
library(highcharter)
tq_get('NKE') %>% hchart()
hchart(tq_get('NKE'))
library(quantmod)
hchart(getSymbols('NKE'))
library(quantmod)
library(highcharter)
hchart(getSymbols('NKE'))
library(quantmod)
library(highcharter)
hchart(getSymbols("USD/JPY", src = "oanda", auto.assign = FALSE))
library(quantmod)
library(highcharter)
hchart(getSymbols("nke", src = "oanda", auto.assign = FALSE))
library(quantmod)
library(highcharter)
hchart(getSymbols("NKE", src = "oanda", auto.assign = FALSE))
library(quantmod)
library(highcharter)
hchart(getSymbols("NKE", auto.assign = FALSE))
library(quantmod)
library(highcharter)
hchart(getSymbols("NKE", auto.assign = FALSE))
library(quantmod)
library(highcharter)
hchart(getSymbols("NKE", auto.assign = FALSE))
library(quantmod)
library(highcharter)
hchart(getSymbols("NKE", auto.assign = FALSE))
